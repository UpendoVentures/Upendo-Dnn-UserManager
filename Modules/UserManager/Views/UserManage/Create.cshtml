@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<Upendo.Modules.UserManager.ViewModels.UserViewModel>

@using System.Collections.Generic
@using DotNetNuke.Web.Mvc.Helpers
@using DotNetNuke.Services.Localization;
@using DotNetNuke.Security.Membership;

@{
  string srcLogo = DotNetNuke.Entities.Tabs.TabController.CurrentPage.Title +
  "/DesktopModules/MVC/Upendo.Modules.UserManager/Images/Upendo-logo-trans.png";
  string ResourceFile = "~/DesktopModules/MVC/Upendo.Modules.UserManager/App_LocalResources/AddEdit.resx";
}
<div id="Items-@Dnn.ModuleContext.ModuleId" style="margin: 2%!important;">
  <div class="col-md-12">
    <div class="col-md-12">
      <h2 id="subtitle">@Localization.GetString("CreateUser", @ResourceFile)</h2>
    </div>
  </div>
  <hr />
  <fieldset class="ml30">
    <div id="validationError" class="alert alert-danger @(!ViewData.ModelState.IsValid ? "" : "hidden")">
      <button type="button" class="close" aria-label="Close" onclick="hideAlert()">
        <span aria-hidden="true">&times;</span>
      </button>
      @Html.ValidationSummary(false, "", new { @class = "" })
    </div>
    <div class="formItem col-6">
      <div><label>@Localization.GetString("FirstName", @ResourceFile)</label></div>
      @Html.TextBoxFor(m => m.FirstName)
      @Html.ValidationMessageFor(m => m.FirstName)
    </div>
    <div class="formItem col-6">
      <div><label>@Localization.GetString("LastName", @ResourceFile)</label></div>
      @Html.TextBoxFor(m => m.LastName)
      @Html.ValidationMessageFor(m => m.LastName)
</div>
    <div class="formItem col-6">
      <div><label>@Localization.GetString("Username", @ResourceFile)</label></div>
      @Html.TextBoxFor(m => m.Username)
      @Html.ValidationMessageFor(m => m.Username)
</div>
    <div class="formItem col-6">
      <div><label>@Localization.GetString("Email", @ResourceFile)</label></div>
      @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @type = "email", id = "email", onkeyup = "validate();" })
      <div id="emailMessage"></div>
      @Html.ValidationMessageFor(m => m.Email)
</div>
    <div class="formItem col-12 mt5">
      <div class="formItem col-6">
        <div><label>@Localization.GetString("Password", @ResourceFile)</label></div>
        @Html.TextBoxFor(m => m.Password, new { @class = "form-control", @id = "password", @type = "password", onkeyup = "handlePasswordValidation();" })
        @Html.ValidationMessageFor(m => m.Password)
        <span id="passwordValidationMessage"></span>
      </div>
      <div class="formItem col-6">
        <div><label>@Localization.GetString("ConfirmPassword", @ResourceFile)</label></div>
        @Html.TextBoxFor(m => m.ConfirmPassword, new { @id = "confirm_password", @type = "password", onkeyup = "validate();" })
        <span id='message'></span>
      </div>
    </div>
    <div class="formItem col-12">
      <div class="dnnFormItem col-3">
        @Html.CheckBoxFor(m => m.IsSuperUser, new { @id = "checkbox" })
        <label>@Localization.GetString("IsSuperUser", @ResourceFile)</label>
      </div>
      <div class="dnnFormItem col-3">
        @Html.CheckBoxFor(m => m.Approved, new { @id = "checkbox" })
        <label>@Localization.GetString("Approved", @ResourceFile)</label>
      </div>
      <div class="dnnFormItem col-4">
        @Html.CheckBoxFor(m => m.SendEmail, new { @id = "checkbox" })
        <label>@Localization.GetString("SendEmailNewUser", @ResourceFile)</label>
      </div>
    </div>
  </fieldset>
  <div class="buttomForm mt20">
    <div class="center">
      <button type="submit" class="disabled" id="saveButton">@Localization.GetString("Save", @ResourceFile)</button>
      <a type="button" class="cancel-buttom" style="color: white;" href="@Url.Action("Index", "UserManage")">
        @Localization.GetString("Cancel", @ResourceFile)
      </a>
    </div>
  </div>
</div>
<script type="text/javascript">
    var weak = '@Localization.GetString("Weak.Text", @ResourceFile)';
    var fair = '@Localization.GetString("Fair.Text", @ResourceFile)';
    var strong = '@Localization.GetString("Strong.Text", @ResourceFile)';
    var passwordMatch = '@Localization.GetString("PasswordMatch.Text", @ResourceFile)';
    var match = '@Localization.GetString("Match.Text", @ResourceFile)';
    var invalidEmailAddress = '@Localization.GetString("InvalidEmailAddress.Text", @ResourceFile)';
    var validEmailAddress = '@Localization.GetString("ValidEmailAddress.Text", @ResourceFile)';

    function validatePassStrength(pass, minLength, minNumberOfSpecialChars, validationExpression) {
        var passwordElement = document.getElementById('password');
        var passwordValidationMessage = document.getElementById('passwordValidationMessage');
        if (pass.length < minLength) {
            passwordElement.style.color = "red";
            passwordValidationMessage.style.color = "red";
            return weak;
        }
        var specialChars = pass.match(/[!@@#$%^&*(),.?":{}|<>+\-]/g);
        if (specialChars === null || specialChars.length < minNumberOfSpecialChars) {
            passwordElement.style.color = "#f6d500";
            passwordValidationMessage.style.color = "#f6d500";
            return fair;
        }
        if (validationExpression !== "" && !new RegExp(validationExpression).test(pass)) {
            passwordElement.style.color = "#f6d500";
            passwordValidationMessage.style.color = "#f6d500";
            return fair;
        }
        passwordElement.style.color = "green";
        passwordValidationMessage.style.color = "green";
        return strong;
    }
    function handlePasswordValidation() {
        var password = document.getElementById('password').value;
        var minLength = @MembershipProviderConfig.MinPasswordLength.ToString();
        var minNumberOfSpecialChars = @MembershipProviderConfig.MinNonAlphanumericCharacters.ToString();
        var validationExpression = "";
        var result = validatePassStrength(password, minLength, minNumberOfSpecialChars, validationExpression);
        var messageElement = document.getElementById('passwordValidationMessage');
        if (messageElement) {
            messageElement.innerHTML = result;
        }
        this.validate();
    }
    function hideAlert() {
        var alertDiv = document.getElementById('validationError');
        alertDiv.style.display = 'none';
        // Enabling a button again
        document.querySelector('#saveButton').classList.remove("disabled");
        document.querySelector('#saveButton').classList.add("primary");
    }
    var emailInput = document.getElementById('email');
    var emailMessage = document.getElementById('emailMessage');
    var emailRegex = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

    function validateEmail() {
        var email = emailInput.value;
        if (emailRegex.test(email)) {
            emailMessage.style.color = 'green';
            emailMessage.innerHTML = validEmailAddress;
            return true;
        } else {
            emailMessage.style.color = 'red';
            emailMessage.innerHTML = invalidEmailAddress;
            return false;
        }
    };
    function validatePassword() {
        var password = document.getElementById('password').value;
        var confirm_password = document.getElementById('confirm_password').value;
        var message = document.getElementById('message');
        if (password == confirm_password && password != "") {
            message.style.color = 'green';
            message.innerHTML = match;
            return true;
        } else {
            if (password != "") {
                message.style.color = 'red';
                message.innerHTML = passwordMatch;
            }
            return false;
        }
    };
    function validate() {
        var validatePassword = this.validatePassword();
        var validateEmail = this.validateEmail();
        if (validatePassword && validateEmail) {
            // Enabling a button again
            document.querySelector('#saveButton').classList.remove("disabled");
            document.querySelector('#saveButton').classList.add("AM-btn AM-btn-primary");
        } else {
            // Disabling a button
            document.querySelector('#saveButton').classList.remove("AM-btn AM-btn-primary");
            document.querySelector('#saveButton').classList.add("disabled");
        }
    };
     /*globals jQuery, window, Sys */
    (function ($, Sys) {
        $(function () {
            $('#cancelEdit').click(function () { dnnModal.closePopUp(false); });
        });
    }(jQuery, window.Sys));
</script>